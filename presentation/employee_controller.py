from fastapi import APIRouter, Depends, status
from dal.unit_of_work import UnitOfWork, get_uow # üëà Import UoW v√† DI
from bus.employee_service import EmployeeService
from dto.employee_dto import EmployeeCreateDto, EmployeeResponseDto, EmployeeUpdateDto
from typing import List

# H√†m DI m·ªõi s·ª≠ d·ª•ng UoW
def get_employee_service(uow: UnitOfWork = Depends(get_uow)) -> EmployeeService:
    # üëà Truy·ªÅn RepositoryGroup t·ª´ UoW v√†o Service
    return EmployeeService(uow.repo)

router = APIRouter(prefix="/employees", tags=["Employees"])

# POST: CREATE
@router.post("/", response_model=EmployeeResponseDto, status_code=status.HTTP_201_CREATED)
def create_employee(dto: EmployeeCreateDto, uow: UnitOfWork = Depends(get_uow)):
    with uow:
        # Service ch·ªâ t·∫°o ƒë·ªëi t∆∞·ª£ng
        new_employee = EmployeeService(uow.repo).create_employee(dto)
        uow.commit() # Commit to√†n b·ªô giao d·ªãch
        uow.refresh(new_employee) # L√†m m·ªõi ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ l·∫•y ID
        return new_employee

# GET: LIST v√† GET by ID gi·ªØ nguy√™n (kh√¥ng c·∫ßn commit)
# ...

# PATCH: PARTIAL UPDATE
@router.patch("/{employee_id}", response_model=EmployeeResponseDto)
def update_employee(employee_id: int, dto: EmployeeUpdateDto, uow: UnitOfWork = Depends(get_uow)):
    with uow:
        # Service s·∫Ω ch·ªâ c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng c√≥ trong DTO
        updated_employee = EmployeeService(uow.repo).update_employee(employee_id, dto)
        uow.commit()
        uow.refresh(updated_employee)
        return updated_employee

# DELETE: DELETE
@router.delete("/{employee_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_employee(employee_id: int, uow: UnitOfWork = Depends(get_uow)):
    with uow:
        result = EmployeeService(uow.repo).delete_employee(employee_id)
        uow.commit() # Commit giao d·ªãch x√≥a
        return result